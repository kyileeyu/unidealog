# Claude Code 프로젝트 규칙

## 코드 스타일

### JSX/TSX 주석 금지
- JSX/TSX 파일에서 `{/* 주석 */}` 형식의 주석을 사용하지 않습니다
- 코드의 의도가 명확하지 않다면 변수명이나 함수명을 개선하거나, 필요시 TypeScript 주석(`// 주석`)을 사용합니다
- 섹션 구분이 필요하다면 빈 줄이나 컴포넌트 분리로 해결합니다

### 타입스크립트
- JSDoc 주석(`/** ... */`)은 필요한 경우에만 사용합니다
- 타입 정의는 명확하고 간결하게 작성합니다

### 중복 제거
- 코드를 작성할 때 중복을 제거합니다
- 동일한 로직이 여러 곳에 존재한다면 공통 함수나 유틸리티로 추출합니다
- 여러 데이터 소스가 있다면 단일 소스로 통합합니다

## 데이터 관리

### 중앙 집중식 설정
- 모든 사이트 설정과 목 데이터는 `src/shared/config/site.ts`에 통합 관리합니다
- 각 페이지에서 하드코딩하지 않고 SITE_CONFIG를 참조합니다

### 단일 데이터 소스 원칙
- 동일한 도메인 데이터를 다루는 함수는 entities 레이어에 통합합니다
- 예: `src/entities/post/api/posts.ts`에서 모든 포스트 관련 API 제공
- 중복된 데이터 fetching 로직은 반드시 제거합니다

## 아키텍처

### FSD (Feature-Sliced Design) + Next.js App Router
- 계층 구조: app → views → widgets → features → entities → shared
- 상위 레이어는 하위 레이어만 참조 가능합니다
- entities 레이어를 통한 데이터 접근을 우선시합니다

### 레이어별 역할
- **app/**: Next.js App Router (라우팅만 담당, 최소 코드)
- **views/**: 페이지 조합 레이어 (widgets/features/entities 조합)
- **widgets/**: 재사용 가능한 큰 UI 블록 (layout, header, footer 등)
- **features/**: 비즈니스 기능 단위 (search, theme, comments 등)
- **entities/**: 도메인 엔티티 (post, user, thread - api/model/lib/ui)
- **shared/**: 공통 자원 (ui, lib, config)

### 파일 구조 규칙
- `views/`: flat 구조 (HomePage.tsx, AboutPage.tsx 등)
- `widgets/`, `features/`, `entities/`: 폴더별 index.ts로 export
- `entities/`: api, model, lib, ui 서브폴더 구조

## 커밋 전 검증

### 개발 서버 확인
- 커밋하기 전에 반드시 `npm run dev`로 개발 서버가 정상 작동하는지 확인합니다
- 빌드 에러, 타입 에러, import 에러 등이 없는지 확인합니다
- 에러가 있다면 수정 후 커밋합니다
